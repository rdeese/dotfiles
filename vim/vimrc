execute pathogen#infect()

" use two spaces for indents, and make them actual spaces
set backspace=2 " '2' doesn't mean 2 spaces; see :help 'backspace' for details
set shiftwidth=2
set tabstop=2
set autoindent
set expandtab

set number
syntax enable
set background=light
colorscheme solarized
set nobackup
filetype indent on
filetype plugin on

" reduce length of timeout waiting for rest of command
set timeoutlen=300 " ms

" Keep space around the cursor when scrolling
set scrolloff=8

" To encourage macro usage
nnoremap <Space> @q

" change split opening to bottom and right instead of top and left
set splitbelow
set splitright

" remap windowswap to a ctrl-w command
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <C-W>y :call WindowSwap#EasyWindowSwap()<CR>

" fzf (assumes installed with homebrew)
set rtp+=/usr/local/opt/fzf
nnoremap <c-p> :FZF<cr>
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_layout = { 'down': '~30%' }
let $FZF_DEFAULT_COMMAND = 'ag -l --nocolor -g ""'

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Use ag to search for the word under the cursor (replaces backwards identifier search)
nnoremap # :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Use \ as a shortcut for :Ag!
nnoremap \ :Ag!<SPACE>

" Escape in normal mode clears search result highlighting
set hlsearch
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" simple session saving
set ssop-=options    " do not store global and local values in a session
command SS execute "mksession! ~/vim_session"
command LS execute "source ~/vim_session"

" json formatting, given that python is installed
command Json execute "%!python -m json.tool"

" TODO: what does this do?
set laststatus=2

" build a beautiful status line
set statusline=%t "tail of the filename
set statusline+=\ %#IncSearch#%{&modified?'\ MODIFIED\ ':''}%*

" set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
" set statusline+=%{&ff}] "file format
" set statusline+=%h      "help file flag
" set statusline+=%m      "modified flag
" set statusline+=%r      "read only flag
" set statusline+=%y      "filetype
set statusline+=%=      "left/right separator

set statusline+=%#warningmsg#									"syntastic warning
set statusline+=%{SyntasticStatuslineFlag()}	"syntastic flag
set statusline+=%*

set statusline+=\ %c,     "cursor column
set statusline+=\ %l/%L   "cursor line/total lines
" set statusline+=\ %P    "percent through file

" build a beautiful tabline
function CustomTabLabel(tab_number, selected)
  let buflist = tabpagebuflist(a:tab_number)
  let num_windows = tabpagewinnr(a:tab_number, '$')
  let focused_window = tabpagewinnr(a:tab_number)
  let label = ''
  let any_buffers_modified = count(map(copy(buflist), {index, val -> getbufvar(val, "&mod")}), 1)

  if a:selected
    let default_highlight = '%#TabLineSel#'
    let tab_number_highlight =  '%#TabLineSel#'
    let modified_highlight =  '%#MatchParen#'
  else
    let default_highlight = '%#TabLine#'
    let tab_number_highlight = '%#Folded#' 
    let modified_highlight =  '%#DiffDelete#'
  endif

  if any_buffers_modified > 0
    let tab_number_string = modified_highlight . a:tab_number . default_highlight
  else
    let tab_number_string = tab_number_highlight . a:tab_number . default_highlight
  endif

  let label .= tab_number_string . ' '
  let label .= pathshorten(bufname(buflist[focused_window - 1]))
  if num_windows > 1
    let label .= ' +' . (num_windows - 1)
  endif
  return label
endfunction

function CustomTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    let is_selected_tab = i + 1 == tabpagenr()
    if is_selected_tab
      let current_highlight = '%#TabLineSel#'
    else
      let current_highlight = '%#TabLine#'
    endif

    let s .= current_highlight

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' ' . CustomTabLabel(i + 1, is_selected_tab) . ' '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  return s
endfunction

set tabline=%!CustomTabLine()

" default syntastic options
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_loc_list = 2 " don't automatically open the loc list

let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_haml_checkers = ['haml_lint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_coffeescript_checkers = ['coffeelint']
let g:syntastic_elm_checkers = ['elm_make']

let g:syntastic_javascript_checkers = ['eslint']

" enable jsx highlighting in .js files
let g:jsx_ext_required = 0

" cursorline in active window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" cooperate with crontab editing
autocmd filetype crontab setlocal nobackup nowritebackup
